struct TKS_Hdr
{
    UINT16 num_entries;
    UINT16 unk;
};

struct TKS_Entry
{
    // The last 4 bytes: key size, thumbprint size.
    UBYTE hdr[16];
    UBYTE pub_key[64];
    UBYTE thumbprint[20];
};

struct UTBL_Hdr
{
    UINT32 magic;  // UTBL
    UINT32 num_entries;
};

TKS_Hdr hdr;

local int entry_index;
local int hdr_index;
local int hdr_size;
for (entry_index = 0; entry_index < hdr.num_entries; ++entry_index) {
    TKS_Entry entry;

    hdr_size = sizeof(entry.hdr) / sizeof(entry.hdr[0]);

    Printf("hdr:");
    for (hdr_index = 0; hdr_index < hdr_size; ++hdr_index) {
        Printf(" %02x", entry.hdr[hdr_index]);
    }
    Printf("\n");
}

UTBL_Hdr utbl_hdr;

local int utbl_index;
for (utbl_index = 0; utbl_index < utbl_hdr.num_entries; ++utbl_index) {
    UINT32 utbl;
}

#include "image_metadata.bt"
