##
## Usage: SetSmApiNames(base)
## eg. SetSmApiNames(0x803E4648)
##
## For diffing use GetSmApiFunctionSignatures(0x803E4648)
##


import zlib
import hashlib

SmApiNames = [
    "",
    "SmGetCurrentVersion", # ; SECURITY_MONITOR_CURRENT_VERSION
    "SmApiPing", #         ; SECURITY_MONITOR_API_PING
    "SmApiQueryFlash", #   ; SECURITY_MONITOR_API_QUERY_FLASH
    "SmApiEraseFlash", #   ; SECURITY_MONITOR_API_ERASE_FLASH
    "SmApiWriteFlash", #   ; SECURITY_MONITOR_API_WRITE_FLASH
    "SmApiVerifyImagineByFlashAddressCmd", # ; SECURITY_MONITOR_API_VERIFY_IMAGE_BY_FLASH_ADDRESS_CMD
    "SmApiResetCmd", #     ; SECURITY_MONITOR_API_RESET_CMD
    "SmApiWriteLog", #     ; SECURITY_MONITOR_API_WRITE_LOG  (IOCTL = SECURITY_MONITOR_WRITE_LOG)
    "SmApiGetLogDataSize", # ; SECURITY_MONITOR_API_GET_LOG_DATA_SIZE (IOCTL = SECURITY_MONITOR_GET_LOG_DATA)
    "SmApiGetLogData", #   ; SECURITY_MONITOR_API_GET_LOG_DATA (IOCTL = SECURITY_MONITOR_GET_LOG_DATA)
    "SmApiDeriveKeyCmd", # ; SECURITY_MONITOR_API_DERIVE_KEY_CMD (IOCTL = SECURITY_MONITOR_DERIVE_KEY)
    "SmApiReserved1", #    ; SECURITY_MONITOR_API_RESERVED1
    "SmApiReserved2", #    ; SECURITY_MONITOR_API_RESERVED2
    "SmApiGetWifiFirmwareLocation", # ; SECURITY_MONITOR_API_GET_WIFI_FIRMWARE_LOCATION
    "SmApiGetApplicationImageCount", # ; SECURITY_MONITOR_API_GET_APPLICATION_IMAGE_COUNT (IOCTL = SECURITY_MONITOR_"SmApi_COMMAND)
    "SmApiListAllApplicationImages", # ; SECURITY_MONITOR_API_LIST_ALL_APPLICATION_IMAGES (IOCTL = SECURITY_MONITOR_"SmApi_COMMAND)
    "SmApiShouldImageBeUpdated", # ; SECURITY_MONITOR_API_SHOULD_IMAGE_BE_UPDATED  (IOCTL = SECURITY_MONITOR_"SmApi_COMMAND)
    "SmApiInvalidateImage", # ; SECURITY_MONITOR_API_INVALIDATE_IMAGE  (IOCTL = SECURITY_MONITOR_"SmApi_COMMAND)
    "SmApiOpenImageForStaging", # ; SECURITY_MONITOR_API_OPEN_IMAGE_FOR_STAGING (IOCTL = SECURITY_MONITOR_"SmApi_COMMAND)
    "SmApiWriteBlockToStageImage", # ; SECURITY_MONITOR_API_WRITE_BLOCK_TO_STAGE_IMAGE (IOCTL = SECURITY_MONITOR_"SmApi_COMMAND)
    "SmApiCommitImageStaging", # ; SECURITY_MONITOR_API_COMMIT_IMAGE_STAGING  (IOCTL = SECURITY_MONITOR_"SmApi_COMMAND)
    "SmApiAbortImageStaging", # ; SECURITY_MONITOR_API_ABORT_IMAGE_STAGING (IOCTL = SECURITY_MONITOR_"SmApi_COMMAND)
    "SmApiInstallStagedImages", # ; SECURITY_MONITOR_API_INSTALL_STAGED_IMAGES (IOCTL = SECURITY_MONITOR_"SmApi_COMMAND)
    "SmApiGetComponentCount", # ; SECURITY_MONITOR_API_GET_COMPONENT_COUNT (IOCTL = SECURITY_MONITOR_"SmApi_COMMAND)
    "SmApiGetComponentSummary", # ; SECURITY_MONITOR_API_GET_COMPONENT_SUMMARY (IOCTL = SECURITY_MONITOR_"SmApi_COMMAND)
    "SmApiGetComponentImages", # ; SECURITY_MONITOR_API_GET_COMPONENT_IMAGES (IOCTL = SECURITY_MONITOR_"SmApi_COMMAND)
    "SmApiStageComponentManifests", # ; SECURITY_MONITOR_API_STAGE_COMPONENT_MANIFESTS (IOCTL = SECURITY_MONITOR_"SmApi_COMMAND)
    "SmApiGetMissingImagesToDownloadCount", # ; SECURITY_MONITOR_API_COUNT_OF_MISSING_IMAGES_TO_DOWNLOAD (IOCTL = SECURITY_MONITOR_"SmApi_COMMAND)
    "SmApiGetMissingImagesToDownload", # ; SECURITY_MONITOR_API_GET_MISSING_IMAGES_TO_DOWNLOAD (IOCTL = SECURITY_MONITOR_"SmApi_COMMAND)
    "SmApiReserved3", #    ; SECURITY_MONITOR_API_RESERVED3
    "SmApiReserved4", #    ; SECURITY_MONITOR_API_RESERVED4
    "SmApiGetABITypeCount", # ; SECURITY_MONITOR_API_GET_ABI_TYPE_COUNT (IOCTL = SECURITY_MONITOR_"SmApi_COMMAND)
    "SmApiGetABIVersions", # ; SECURITY_MONITOR_API_GET_ABI_VERSIONS (IOCTL = SECURITY_MONITOR_"SmApi_COMMAND)
    "SmApiSetRtcCurrentTime", # ; SECURITY_MONITOR_API_SET_RTC_CURRENT_TIME
    "SmApiSetRtcAlarm", #  ; SECURITY_MONITOR_API_SET_RTC_ALARM
    "SmApiGetUpdateCertStoreImageInfo", # ; SECURITY_MONITOR_API_GET_UPDATE_CERT_STORE_IMAGE_INFO (IOCTL = SECURITY_MONITOR_"SmApi_COMMAND)
    "SmApiStageBaseManifests", # ; SECURITY_MONITOR_API_STAGE_BASE_MANIFESTS (IOCTL = SECURITY_MONITOR_"SmApi_COMMAND)
    "SmApiGetMissingBaseImagesToDownloadCount", # ; SECURITY_MONITOR_API_COUNT_OF_MISSING_BASE_IMAGES_TO_DOWNLOAD (IOCTL = SECURITY_MONITOR_"SmApi_COMMAND)
    "SmApiGetMissingBaseImagesToDownload", # ; SECURITY_MONITOR_API_GET_MISSING_BASE_IMAGES_TO_DOWNLOAD (IOCTL = SECURITY_MONITOR_"SmApi_COMMAND)
    "SmApiIoCoreControl", # ; SECURITY_MONITOR_API_IO_CORE_CONTROL (IOCTL = SECURITY_MONITOR_IO_CORE_CONTROL)
    "SmApiGetRollbackInfo", # ; SECURITY_MONITOR_API_GET_ROLLBACK_INFO (IOCTL = SECURITY_MONITOR_"SmApi_COMMAND)
    "SmApiRecordTelemetryEventData", # ; SECURITY_MONITOR_API_RECORD_TELEMETRY_EVENT_DATA (IOCTL = SECURITY_MONITOR_RECORD_TELEMETRY_EVENT_DATA)
    "SmApiGetTelemetryData", # ; SECURITY_MONITOR_API_GET_TELEMETRY_DATA (IOCTL = SECURITY_MONITOR_GET_TELEMETRY)
    "SmApiResetTelemetry", # ; SECURITY_MONITOR_API_RESET_TELEMETRY
    "SmApiRetainTelemetry", # ; SECURITY_MONITOR_API_RETAIN_TELEMETRY (IOCTL = SECURITY_MONITOR_RESET_RETAIN_TELEMETRY)
    "SmApiPeripheralAcquire", # ; SECURITY_MONITOR_API_PERIPHERAL_ACQUIRE (IOCTL = SECURITY_MONITOR_"SmApi_COMMAND)
    "SmApiPeripheralRelease", # ; SECURITY_MONITOR_API_PERIPHERAL_RELEASE (IOCTL = SECURITY_MONITOR_"SmApi_COMMAND)
    "SmApiPeripheralGetAvailableDomains", # ; SECURITY_MONITOR_API_PERIPHERAL_GET_AVAILABLE_DOMAINS (IOCTL = SECURITY_MONITOR_"SmApi_COMMAND)
    "SmApiPeripheralLockConfig", # ; SECURITY_MONITOR_API_PERIPHERAL_LOCK_CONFIG (IOCTL = SECURITY_MONITOR_"SmApi_COMMAND)
    "SmApiTendWatchdog"] # ; SECURITY_MONITOR_API_TEND_WATCHDOG

SmApiComments = [
        "",
        "SECURITY_MONITOR_CURRENT_VERSION",
        "SECURITY_MONITOR_API_PING",
        "SECURITY_MONITOR_API_QUERY_FLASH",
        "SECURITY_MONITOR_API_ERASE_FLASH",
        "SECURITY_MONITOR_API_WRITE_FLASH",
        "SECURITY_MONITOR_API_VERIFY_IMAGE_BY_FLASH_ADDRESS_CMD",
        "SECURITY_MONITOR_API_RESET_CMD",
        "SECURITY_MONITOR_API_WRITE_LOG  (IOCTL = SECURITY_MONITOR_WRITE_LOG)",
        "SECURITY_MONITOR_API_GET_LOG_DATA_SIZE (IOCTL = SECURITY_MONITOR_GET_LOG_DATA)",
        "SECURITY_MONITOR_API_GET_LOG_DATA (IOCTL = SECURITY_MONITOR_GET_LOG_DATA)",
        "SECURITY_MONITOR_API_DERIVE_KEY_CMD (IOCTL = SECURITY_MONITOR_DERIVE_KEY)",
        "SECURITY_MONITOR_API_RESERVED1",
        "SECURITY_MONITOR_API_RESERVED2",
        "SECURITY_MONITOR_API_GET_WIFI_FIRMWARE_LOCATION",
        "SECURITY_MONITOR_API_GET_APPLICATION_IMAGE_COUNT (IOCTL = SECURITY_MONITOR_SMAPI_COMMAND)",
        "SECURITY_MONITOR_API_LIST_ALL_APPLICATION_IMAGES (IOCTL = SECURITY_MONITOR_SMAPI_COMMAND)",
        "SECURITY_MONITOR_API_SHOULD_IMAGE_BE_UPDATED  (IOCTL = SECURITY_MONITOR_SMAPI_COMMAND)",
        "SECURITY_MONITOR_API_INVALIDATE_IMAGE  (IOCTL = SECURITY_MONITOR_SMAPI_COMMAND)",
        "SECURITY_MONITOR_API_OPEN_IMAGE_FOR_STAGING (IOCTL = SECURITY_MONITOR_SMAPI_COMMAND)",
        "SECURITY_MONITOR_API_WRITE_BLOCK_TO_STAGE_IMAGE (IOCTL = SECURITY_MONITOR_SMAPI_COMMAND)",
        "SECURITY_MONITOR_API_COMMIT_IMAGE_STAGING  (IOCTL = SECURITY_MONITOR_SMAPI_COMMAND)",
        "SECURITY_MONITOR_API_ABORT_IMAGE_STAGING (IOCTL = SECURITY_MONITOR_SMAPI_COMMAND)",
        "SECURITY_MONITOR_API_INSTALL_STAGED_IMAGES (IOCTL = SECURITY_MONITOR_SMAPI_COMMAND)",
        "SECURITY_MONITOR_API_GET_COMPONENT_COUNT (IOCTL = SECURITY_MONITOR_SMAPI_COMMAND)",
        "SECURITY_MONITOR_API_GET_COMPONENT_SUMMARY (IOCTL = SECURITY_MONITOR_SMAPI_COMMAND)",
        "SECURITY_MONITOR_API_GET_COMPONENT_IMAGES (IOCTL = SECURITY_MONITOR_SMAPI_COMMAND)",
        "SECURITY_MONITOR_API_STAGE_COMPONENT_MANIFESTS (IOCTL = SECURITY_MONITOR_SMAPI_COMMAND)",
        "SECURITY_MONITOR_API_COUNT_OF_MISSING_IMAGES_TO_DOWNLOAD (IOCTL = SECURITY_MONITOR_SMAPI_COMMAND)",
        "SECURITY_MONITOR_API_GET_MISSING_IMAGES_TO_DOWNLOAD (IOCTL = SECURITY_MONITOR_SMAPI_COMMAND)",
        "SECURITY_MONITOR_API_RESERVED3",
        "SECURITY_MONITOR_API_RESERVED4",
        "SECURITY_MONITOR_API_GET_ABI_TYPE_COUNT (IOCTL = SECURITY_MONITOR_SMAPI_COMMAND)",
        "SECURITY_MONITOR_API_GET_ABI_VERSIONS (IOCTL = SECURITY_MONITOR_SMAPI_COMMAND)",
        "SECURITY_MONITOR_API_SET_RTC_CURRENT_TIME",
        "SECURITY_MONITOR_API_SET_RTC_ALARM",
        "SECURITY_MONITOR_API_GET_UPDATE_CERT_STORE_IMAGE_INFO (IOCTL = SECURITY_MONITOR_SMAPI_COMMAND)",
        "SECURITY_MONITOR_API_STAGE_BASE_MANIFESTS (IOCTL = SECURITY_MONITOR_SMAPI_COMMAND)",
        "SECURITY_MONITOR_API_COUNT_OF_MISSING_BASE_IMAGES_TO_DOWNLOAD (IOCTL = SECURITY_MONITOR_SMAPI_COMMAND)",
        "SECURITY_MONITOR_API_GET_MISSING_BASE_IMAGES_TO_DOWNLOAD (IOCTL = SECURITY_MONITOR_SMAPI_COMMAND)",
        "SECURITY_MONITOR_API_IO_CORE_CONTROL (IOCTL = SECURITY_MONITOR_IO_CORE_CONTROL)",
        "SECURITY_MONITOR_API_GET_ROLLBACK_INFO (IOCTL = SECURITY_MONITOR_SMAPI_COMMAND)",
        "SECURITY_MONITOR_API_RECORD_TELEMETRY_EVENT_DATA (IOCTL = SECURITY_MONITOR_RECORD_TELEMETRY_EVENT_DATA)",
        "SECURITY_MONITOR_API_GET_TELEMETRY_DATA (IOCTL = SECURITY_MONITOR_GET_TELEMETRY)",
        "SECURITY_MONITOR_API_RESET_TELEMETRY",
        "SECURITY_MONITOR_API_RETAIN_TELEMETRY (IOCTL = SECURITY_MONITOR_RESET_RETAIN_TELEMETRY)",
        "SECURITY_MONITOR_API_PERIPHERAL_ACQUIRE (IOCTL = SECURITY_MONITOR_SMAPI_COMMAND)",
        "SECURITY_MONITOR_API_PERIPHERAL_RELEASE (IOCTL = SECURITY_MONITOR_SMAPI_COMMAND)",
        "SECURITY_MONITOR_API_PERIPHERAL_GET_AVAILABLE_DOMAINS (IOCTL = SECURITY_MONITOR_SMAPI_COMMAND)",
        "SECURITY_MONITOR_API_PERIPHERAL_LOCK_CONFIG (IOCTL = SECURITY_MONITOR_SMAPI_COMMAND)",
        "SECURITY_MONITOR_API_TEND_WATCHDOG"
]

def SetSmApiNames(addr):
    i = 1
    if Dword(addr) != 0:
        print("This is not a valid SM API Table")

    set_name(addr, "SmApiTable")

    while i < 51:
        ptr = addr + i * 4
        value = Dword(ptr) - 1
        print("Value = %x Name = %s" % (value, SmApiNames[i]))
        set_name(value, SmApiNames[i])
        create_dword(ptr)
        try:
            set_cmt(ptr, SmApiComments[i])
        except TypeError:
            set_cmt(ptr, SmApiComments[i], True)
        create_insn(value)
        op_plain_offset(ptr, 0, 0)
        op_plain_offset(ptr, 128, 0)
        i = i + 1


def GetSmApiFunctionSignatures(addr):
    i = 1
    if Dword(addr) != 0:
        print("This is not a valid SM API Table")

    res = ""

    while i < 51:
        ptr = addr + i * 4
        func_start = Dword(ptr) - 1

        MakeFunction(func_start)

        end = find_func_end(func_start)
        name = GetFunctionName(func_start)
        length = end - func_start
        buf = get_bytes(func_start, length)
        crc = zlib.crc32(buf) % (1<<32)
        sha2 = hashlib.sha256(buf).hexdigest()

        res += "addr:   0x{:08x}\n".format(func_start)
        res += "name:   {}\n".format(name)
        res += "length: 0x{:x}\n".format(length)
        res += "crc32:  0x{:08x}\n".format(crc)
        res += "sha256: {}\n".format(sha2)

        for j, c in enumerate(buf):
            if (j != 0 and (j + 1) % 16 == 0) or j + 1 == len(buf):
                res += "{:02x}\n".format(ord(c))
            else:
                res += "{:02x} ".format(ord(c))

        res += "\n"

        i += 1

    return res


def main():
    sm_table_addr = AskAddr(here(), "SM API Table address")
    if not sm_table_addr:
        Warning("Invalid address: {}".format(sm_table_addr))
        return

    out_file = AskFile(1, "*.txt", "Output file")
    if not out_file:
        Warning("Invalid output file")
        return

    print "Setting SM API names..."
    SetSmApiNames(sm_table_addr)

    print "Getting SM API function signatures..."
    sigs = GetSmApiFunctionSignatures(sm_table_addr)

    with open(out_file, "w") as f:
        f.write(sigs)

    print "Done"


main()
